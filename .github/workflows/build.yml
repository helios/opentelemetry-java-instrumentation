name: Build

on:
  push:
    branches:
      - main
      - release/*
  workflow_dispatch:

jobs:
  assemble:
    uses: ./.github/workflows/reusable-assemble.yml
    secrets:
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
      GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}

  test-java11:
    uses: ./.github/workflows/reusable-test-11.yml
    secrets:
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
      GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}

  smoke-test:
    uses: ./.github/workflows/reusable-smoke-test.yml
    secrets:
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
      GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}

  muzzle:
    # release branches are excluded
    # because any time a new library version is released to maven central it can fail
    # which requires unnecessary release branch maintenance, especially for patches
    if: ${{ !startsWith(github.ref_name, 'release/') }}
    uses: ./.github/workflows/reusable-muzzle.yml

  gradle-plugins:
    uses: ./.github/workflows/reusable-gradle-plugins.yml

  markdown-link-check:
    # release branches are excluded to avoid unnecessary maintenance if external links break
    # (and also because the README.md javaagent download link has to be updated on release branches
    #  before the release download has been published)
    if: ${{ !startsWith(github.ref_name, 'release/') }}
    uses: ./.github/workflows/reusable-markdown-link-check.yml

  misspell-check:
    # release branches are excluded to avoid unnecessary maintenance if new misspellings are added
    # to the misspell dictionary
    if: ${{ !startsWith(github.ref_name, 'release/') }}
    uses: ./.github/workflows/reusable-misspell-check.yml
